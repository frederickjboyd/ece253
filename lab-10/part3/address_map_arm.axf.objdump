
W:/ece253/10/part3/address_map_arm.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	ea000053 	b	154 <_start>
   4:	ea00001a 	b	74 <SERVICE_UND>
   8:	ea00001a 	b	78 <SERVICE_SVC>
   c:	ea00001b 	b	80 <SERVICE_ABT_INST>
  10:	ea000019 	b	7c <SERVICE_ABT_DATA>
  14:	00000000 	.word	0x00000000
  18:	ea000008 	b	40 <__cs3_region_init_ram>
  1c:	ea000018 	b	84 <SERVICE_FIQ>

Disassembly of section .text:

00000040 <SERVICE_IRQ>:
  40:	e92d403f 	push	{r0, r1, r2, r3, r4, r5, lr}
  44:	e59f40c0 	ldr	r4, [pc, #192]	; 10c <ICDISER+0xc>
  48:	e594500c 	ldr	r5, [r4, #12]

0000004c <PRIV_TIMER_CHECK>:
  4c:	e355001d 	cmp	r5, #29
  50:	1a000001 	bne	5c <KEYS_CHECK>
  54:	eb00005c 	bl	1cc <PRIV_TIMER_ISR>
  58:	ea000002 	b	68 <EXIT_IRQ>

0000005c <KEYS_CHECK>:
  5c:	e3550049 	cmp	r5, #73	; 0x49

00000060 <UNEXPECTED>:
  60:	1afffffe 	bne	60 <UNEXPECTED>
  64:	eb00002d 	bl	120 <KEY_ISR>

00000068 <EXIT_IRQ>:
  68:	e5845010 	str	r5, [r4, #16]
  6c:	e8bd403f 	pop	{r0, r1, r2, r3, r4, r5, lr}
  70:	e25ef004 	subs	pc, lr, #4

00000074 <SERVICE_UND>:
  74:	eafffffe 	b	74 <SERVICE_UND>

00000078 <SERVICE_SVC>:
  78:	eafffffe 	b	78 <SERVICE_SVC>

0000007c <SERVICE_ABT_DATA>:
  7c:	eafffffe 	b	7c <SERVICE_ABT_DATA>

00000080 <SERVICE_ABT_INST>:
  80:	eafffffe 	b	80 <SERVICE_ABT_INST>

00000084 <SERVICE_FIQ>:
  84:	eafffffe 	b	84 <SERVICE_FIQ>

00000088 <CONFIG_GIC>:
  88:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  8c:	e3a0001d 	mov	r0, #29
  90:	e3a01001 	mov	r1, #1
  94:	eb00000a 	bl	c4 <CONFIG_INTERRUPT>
  98:	e3a00049 	mov	r0, #73	; 0x49
  9c:	e3a01001 	mov	r1, #1
  a0:	eb000007 	bl	c4 <CONFIG_INTERRUPT>
  a4:	e59f0060 	ldr	r0, [pc, #96]	; 10c <ICDISER+0xc>
  a8:	e59f1060 	ldr	r1, [pc, #96]	; 110 <ICDISER+0x10>
  ac:	e5801004 	str	r1, [r0, #4]
  b0:	e3a01001 	mov	r1, #1
  b4:	e5801000 	str	r1, [r0]
  b8:	e59f0054 	ldr	r0, [pc, #84]	; 114 <ICDISER+0x14>
  bc:	e5801000 	str	r1, [r0]
  c0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000000c4 <CONFIG_INTERRUPT>:
  c4:	e92d4030 	push	{r4, r5, lr}
  c8:	e1a041a0 	lsr	r4, r0, #3
  cc:	e3c44003 	bic	r4, r4, #3
  d0:	e59f2040 	ldr	r2, [pc, #64]	; 118 <ICDISER+0x18>
  d4:	e0824004 	add	r4, r2, r4
  d8:	e200201f 	and	r2, r0, #31
  dc:	e3a05001 	mov	r5, #1
  e0:	e1a02215 	lsl	r2, r5, r2
  e4:	e5943000 	ldr	r3, [r4]
  e8:	e1833002 	orr	r3, r3, r2
  ec:	e5843000 	str	r3, [r4]
  f0:	e3c04003 	bic	r4, r0, #3
  f4:	e59f2020 	ldr	r2, [pc, #32]	; 11c <ICDISER+0x1c>
  f8:	e0824004 	add	r4, r2, r4
  fc:	e2002003 	and	r2, r0, #3
 100:	e0824004 	add	r4, r2, r4
 104:	e5c41000 	strb	r1, [r4]
 108:	e8bd8030 	pop	{r4, r5, pc}
 10c:	fffec100 	.word	0xfffec100
 110:	0000ffff 	.word	0x0000ffff
 114:	fffed000 	.word	0xfffed000
 118:	fffed100 	.word	0xfffed100
 11c:	fffed800 	.word	0xfffed800

00000120 <KEY_ISR>:
 * This routine checks which KEY has been pressed.  If KEY3 it stops/starts the timer.
****************************************************************************************/
					.global	KEY_ISR
                    .include "address_map_arm.s"
KEY_ISR:
					LDR		R0, =KEY_BASE						// Base address of KEYs parallel port
 120:	e59f0024 	ldr	r0, [pc, #36]	; 14c <END_KEY_ISR+0x4>
					LDR		R1, [R0, #0xC]					// Read edge capture register
 124:	e590100c 	ldr	r1, [r0, #12]
					STR		R1, [R0, #0xC]					// Clear the interrupt
 128:	e580100c 	str	r1, [r0, #12]

0000012c <CHK_KEY3>:

CHK_KEY3:
					TST		R1, #0b1000							// Check if KEY3 has been pressed
 12c:	e3110008 	tst	r1, #8
					BEQ		END_KEY_ISR							// If equal, then KEY3 has not been pressed
 130:	0a000004 	beq	148 <END_KEY_ISR>

00000134 <START_STOP>:

START_STOP:
					LDR		R0, =MPCORE_PRIV_TIMER	// Timer base address
 134:	e59f0014 	ldr	r0, [pc, #20]	; 150 <END_KEY_ISR+0x8>
					LDR		R1, [R0, #0x8]					// Read timer control register
 138:	e5901008 	ldr	r1, [r0, #8]
					MOV		R2, #1									// Move 1 into R3
 13c:	e3a02001 	mov	r2, #1
					EOR		R1, R2									// EOR the enable bit with 1 to flip it
 140:	e0211002 	eor	r1, r1, r2
					STR		R1, [R0, #0x8]					// Store enable bit to control register 
 144:	e5801008 	str	r1, [r0, #8]

00000148 <END_KEY_ISR>:
																				// to start/stop the timer (E)

END_KEY_ISR:
					MOV		PC, LR
 148:	e1a0f00e 	mov	pc, lr
 14c:	ff200050 	.word	0xff200050
 150:	fffec600 	.word	0xfffec600

00000154 <_start>:
*/
			.text
			.global	_start
_start:
			/* Initializing IRQ stack pointer */
			MOV	R0, #0b10010					// Load IRQ mode value into R0
 154:	e3a00012 	mov	r0, #18
			MSR	CPSR, R0							// Change mode to IRQ
 158:	e129f000 	msr	CPSR_fc, r0
			LDR	SP, =0xFFFFFFFC				// Set stack pointer
 15c:	e3e0d003 	mvn	sp, #3
			/* Initializing SVC stack pointer */
			MOV	R0, #0b10011					// Load SVC mode value into R0
 160:	e3a00013 	mov	r0, #19
			MSR	CPSR, R0							// Change mode to SVC
 164:	e129f000 	msr	CPSR_fc, r0
			LDR	SP, =0x3FFFFFFC				// Set stack pointer
 168:	e3e0d10f 	mvn	sp, #-1073741821	; 0xc0000003

			// Configuring GIC, timer, KEYS
			BL	CONFIG_GIC						// Configure the ARM generic interrupt controller
 16c:	ebffffc5 	bl	88 <CONFIG_GIC>
			BL	CONFIG_PRIV_TIMER			// Configure the MPCore private timer
 170:	eb000005 	bl	18c <CONFIG_PRIV_TIMER>
			BL	CONFIG_KEYS						// Configure the pushbutton KEYs
 174:	eb00000a 	bl	1a4 <CONFIG_KEYS>
			
			/* Enable ARM processor interrupts */
			MSR	CPSR, #0b00010011			// Change 7th bit to 0 in SVC mode to enable interrupts
 178:	e329f013 	msr	CPSR_fc, #19

			LDR	R6, =0xFF200000				// Red LED base address
 17c:	e59f6038 	ldr	r6, [pc, #56]	; 1bc <LEDR_PATTERN+0x4>

00000180 <MAIN>:

MAIN:
			LDR	R4, LEDR_PATTERN			// LEDR pattern; modified by timer ISR
 180:	e59f4030 	ldr	r4, [pc, #48]	; 1b8 <LEDR_PATTERN>
			STR	R4, [R6]							// Write to red LEDs
 184:	e5864000 	str	r4, [r6]
			B		MAIN
 188:	eafffffc 	b	180 <MAIN>

0000018c <CONFIG_PRIV_TIMER>:

/* Configure the MPCore private timer to create interrupts every 1/10 second */
CONFIG_PRIV_TIMER:
			LDR	R0, =0xFFFEC600				// Timer base address
 18c:	e59f002c 	ldr	r0, [pc, #44]	; 1c0 <LEDR_PATTERN+0x8>
			LDR	R1, =20000000					// Set timer to 0.1s
 190:	e59f102c 	ldr	r1, [pc, #44]	; 1c4 <LEDR_PATTERN+0xc>
			STR	R1, [R0]							// Specify number to count down from
 194:	e5801000 	str	r1, [r0]
			MOV	R1, #0b111						// I = 1 (enable interrupts), A = 1 (auto-reload), E (start timer)
 198:	e3a01007 	mov	r1, #7
			STR R1, [R0, #8]					// Write to control address
 19c:	e5801008 	str	r1, [r0, #8]
			MOV	PC, LR								// Return
 1a0:	e1a0f00e 	mov	pc, lr

000001a4 <CONFIG_KEYS>:

/* Configure the KEYS to generate an interrupt */
CONFIG_KEYS:
			LDR	R0, =0xFF200050				// KEYs base address
 1a4:	e59f001c 	ldr	r0, [pc, #28]	; 1c8 <LEDR_PATTERN+0x10>
			MOV	R1, #0b1000						// Look for when KEY3 is pressed
 1a8:	e3a01008 	mov	r1, #8
			STR	R1, [R0, #0x8]				// Store in interrupt mask register
 1ac:	e5801008 	str	r1, [r0, #8]
			MOV 		PC, LR						// Return
 1b0:	e1a0f00e 	mov	pc, lr

000001b4 <LEDR_DIRECTION>:
 1b4:	00000000 	.word	0x00000000

000001b8 <LEDR_PATTERN>:
 1b8:	00000001 	.word	0x00000001
 1bc:	ff200000 	.word	0xff200000
 1c0:	fffec600 	.word	0xfffec600
 1c4:	01312d00 	.word	0x01312d00
 1c8:	ff200050 	.word	0xff200050

000001cc <PRIV_TIMER_ISR>:
 * Shifts the pattern being displayed on the LEDR
 * 
******************************************************************************/
				.global PRIV_TIMER_ISR
PRIV_TIMER_ISR:
				LDR		R0, =MPCORE_PRIV_TIMER	// Base address of timer
 1cc:	e59f0054 	ldr	r0, [pc, #84]	; 228 <END_TIMER_ISR+0x4>
				MOV		R1, #1
 1d0:	e3a01001 	mov	r1, #1
				STR		R1, [R0, #0xC]					// Write 1 to F bit to reset it and clear 
 1d4:	e580100c 	str	r1, [r0, #12]

000001d8 <SWEEP>:
																			// the interrupt

/* Rotate the LEDR bits either to the left or right. Reverses direction when hitting 
	position 9 on the left, or position 0 on the right */
SWEEP:
				LDR		R0, =LEDR_DIRECTION			// Put shifting direction into R2
 1d8:	e59f004c 	ldr	r0, [pc, #76]	; 22c <END_TIMER_ISR+0x8>
				LDR		R2, [R0]
 1dc:	e5902000 	ldr	r2, [r0]
				LDR		R1, =LEDR_PATTERN				// Put LEDR pattern into R3
 1e0:	e59f1048 	ldr	r1, [pc, #72]	; 230 <END_TIMER_ISR+0xc>
				LDR		R3, [R1]
 1e4:	e5913000 	ldr	r3, [r1]
				CMP		R2, #0									// Checks if direction if left
 1e8:	e3520000 	cmp	r2, #0
				BEQ		SHIFTL									// If left, branch to left subroutine
 1ec:	0a000000 	beq	1f4 <SHIFTL>
				B			SHIFTR									// Otherwise, branch to right subroutine
 1f0:	ea000004 	b	208 <SHIFTR>

000001f4 <SHIFTL>:

SHIFTL:
				ROR	R3, #31										// Shift left (shift right 31 bits)
 1f4:	e1a03fe3 	ror	r3, r3, #31
				CMP	R3, #0x200								// Check if left-most LED is lit up
 1f8:	e3530c02 	cmp	r3, #512	; 0x200
				BNE	DONE_SWEEP								// If left-most LED is not lit up, start to wrap up
 1fc:	1a000006 	bne	21c <DONE_SWEEP>

00000200 <L_R>:
L_R:
				MOV	R2, #1										// change direction to right
 200:	e3a02001 	mov	r2, #1
				B		DONE_SWEEP
 204:	ea000004 	b	21c <DONE_SWEEP>

00000208 <SHIFTR>:

SHIFTR:	ROR	R3, #1										// Shift right (shift right 1 bit)
 208:	e1a030e3 	ror	r3, r3, #1
				CMP	R3, #0x1									// Check if right-most LED is lit up
 20c:	e3530001 	cmp	r3, #1
				BNE	DONE_SWEEP
 210:	1a000001 	bne	21c <DONE_SWEEP>

00000214 <R_L>:
R_L:
				MOV	R2, #0										// Change direction to left
 214:	e3a02000 	mov	r2, #0
				B		DONE_SWEEP
 218:	eaffffff 	b	21c <DONE_SWEEP>

0000021c <DONE_SWEEP>:

DONE_SWEEP:
				STR		R2, [R0]								// Put shifting direction back into memory
 21c:	e5802000 	str	r2, [r0]
				STR		R3, [R1]								// Put LEDR pattern back onto stack
 220:	e5813000 	str	r3, [r1]

00000224 <END_TIMER_ISR>:
	
END_TIMER_ISR:
				MOV		PC, LR
 224:	e1a0f00e 	mov	pc, lr
 228:	fffec600 	.word	0xfffec600
 22c:	000001b4 	.word	0x000001b4
 230:	000001b8 	.word	0x000001b8
